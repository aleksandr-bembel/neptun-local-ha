"""
üîã –ö–ê–†–¢–ê –ü–û–õ–ï–ô –î–ê–¢–ß–ò–ö–û–í NEPTUN

–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
–≤ –æ—Ç–≤–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã SYSTEM_STATE (112 –±–∞–π—Ç).
"""

# –ü–æ–∑–∏—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –≤ SYSTEM_STATE (112 –±–∞–π—Ç)
SENSOR_BATTERY_POSITIONS = {
    1: 53,  # –ü–µ—Ä–≤—ã–π –¥–∞—Ç—á–∏–∫
    2: 57,  # –í—Ç–æ—Ä–æ–π –¥–∞—Ç—á–∏–∫  
    3: 61,  # –¢—Ä–µ—Ç–∏–π –¥–∞—Ç—á–∏–∫
}

# –ü–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
SENSOR_STATE_POSITIONS = {
    1: 51,  # –ü–µ—Ä–≤—ã–π –¥–∞—Ç—á–∏–∫
    2: 55,  # –í—Ç–æ—Ä–æ–π –¥–∞—Ç—á–∏–∫
    3: 59,  # –¢—Ä–µ—Ç–∏–π –¥–∞—Ç—á–∏–∫
}

# –ü–æ–∑–∏—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤
SENSOR_INDEX_POSITIONS = {
    1: 52,  # –ü–µ—Ä–≤—ã–π –¥–∞—Ç—á–∏–∫
    2: 56,  # –í—Ç–æ—Ä–æ–π –¥–∞—Ç—á–∏–∫
    3: 60,  # –¢—Ä–µ—Ç–∏–π –¥–∞—Ç—á–∏–∫
}

# –ü–æ–∑–∏—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–∞—Ç—á–∏–∫–æ–≤
SENSOR_SIGNAL_POSITIONS = {
    1: 54,  # –ü–µ—Ä–≤—ã–π –¥–∞—Ç—á–∏–∫
    2: 58,  # –í—Ç–æ—Ä–æ–π –¥–∞—Ç—á–∏–∫
    3: 62,  # –¢—Ä–µ—Ç–∏–π –¥–∞—Ç—á–∏–∫
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏
SENSOR_INTERVAL = 4  # –±–∞–π—Ç–∞

def get_sensor_battery_position(sensor_number: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞."""
    if sensor_number not in SENSOR_BATTERY_POSITIONS:
        raise ValueError(f"Invalid sensor number: {sensor_number}")
    return SENSOR_BATTERY_POSITIONS[sensor_number]

def get_sensor_state_position(sensor_number: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞."""
    if sensor_number not in SENSOR_STATE_POSITIONS:
        raise ValueError(f"Invalid sensor number: {sensor_number}")
    return SENSOR_STATE_POSITIONS[sensor_number]

def get_sensor_index_position(sensor_number: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞."""
    if sensor_number not in SENSOR_INDEX_POSITIONS:
        raise ValueError(f"Invalid sensor number: {sensor_number}")
    return SENSOR_INDEX_POSITIONS[sensor_number]

def get_sensor_signal_position(sensor_number: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞."""
    if sensor_number not in SENSOR_SIGNAL_POSITIONS:
        raise ValueError(f"Invalid sensor number: {sensor_number}")
    return SENSOR_SIGNAL_POSITIONS[sensor_number]

def parse_battery_level(battery_byte: int) -> int:
    """
    –ü–∞—Ä—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –∏–∑ –±–∞–π—Ç–∞ —Å —É—á–µ—Ç–æ–º –∑–Ω–∞–∫–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.
    
    Args:
        battery_byte: –ë–∞–π—Ç —Å —É—Ä–æ–≤–Ω–µ–º –±–∞—Ç–∞—Ä–µ–∏
        
    Returns:
        –£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
        
    Examples:
        parse_battery_level(0x64) -> 100  # 100%
        parse_battery_level(0xD6) -> 42   # 42% (0xD6 = -42 –∑–Ω–∞–∫–æ–≤–æ–µ)
    """
    import struct
    battery_signed = struct.unpack('b', bytes([battery_byte]))[0]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xD6 = -42 –æ–∑–Ω–∞—á–∞–µ—Ç 42%)
    if battery_signed < 0:
        return abs(battery_signed)
    else:
        return battery_signed

def parse_sensor_state(state_byte: int) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –∏–∑ –±–∞–π—Ç–∞.
    
    Args:
        state_byte: –ë–∞–π—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–∞—Ç—á–∏–∫–∞
        
    Returns:
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    state_map = {
        0x00: "disconnected",  # –û—Ç–∫–ª—é—á–µ–Ω
        0x02: "triggered",     # –°—Ä–∞–±–æ—Ç–∞–ª
        0x03: "normal",        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
    
    return state_map.get(state_byte, f"unknown_{state_byte:02X}")

def parse_signal_level(signal_byte: int) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –±–∞–π—Ç–∞.
    
    Args:
        signal_byte: –ë–∞–π—Ç —Å —É—Ä–æ–≤–Ω–µ–º —Å–∏–≥–Ω–∞–ª–∞
        
    Returns:
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
    """
    signal_map = {
        0x00: "no_signal",     # –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
        0x01: "good_signal",   # –•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª
    }
    
    return signal_map.get(signal_byte, f"unknown_{signal_byte:02X}")

def get_sensor_data(system_state_data: bytes, sensor_number: int) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
    Args:
        system_state_data: –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (112 –±–∞–π—Ç)
        sensor_number: –ù–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ (1, 2, 3)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞
    """
    if len(system_state_data) < 112:
        raise ValueError("System state data too short")
    
    if sensor_number not in [1, 2, 3]:
        raise ValueError("Invalid sensor number")
    
    battery_pos = get_sensor_battery_position(sensor_number)
    state_pos = get_sensor_state_position(sensor_number)
    index_pos = get_sensor_index_position(sensor_number)
    signal_pos = get_sensor_signal_position(sensor_number)
    
    return {
        "sensor_number": sensor_number,
        "battery_level": parse_battery_level(system_state_data[battery_pos]),
        "battery_raw": system_state_data[battery_pos],
        "state": parse_sensor_state(system_state_data[state_pos]),
        "state_raw": system_state_data[state_pos],
        "index": system_state_data[index_pos],
        "signal_level": parse_signal_level(system_state_data[signal_pos]),
        "signal_raw": system_state_data[signal_pos],
        "positions": {
            "battery": battery_pos,
            "state": state_pos,
            "index": index_pos,
            "signal": signal_pos,
        }
    }

def get_all_sensors_data(system_state_data: bytes) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
    Args:
        system_state_data: –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (112 –±–∞–π—Ç)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    """
    sensors_data = {}
    
    for sensor_number in [1, 2, 3]:
        sensors_data[f"sensor_{sensor_number}"] = get_sensor_data(
            system_state_data, sensor_number
        )
    
    return sensors_data

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞ —Å –Ω–∏–∑–∫–∏–º –∑–∞—Ä—è–¥–æ–º –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
    example_data = bytes.fromhex(
        "0254415200684900054E343130364D001136303A43353A41383A36463A35363A3641410001005300070103000000000473000C0301D60003026400020364004C000402000000430014000000000100000000010000000001000000000144000A31343932333836313033570001043F0E"
    )
    
    print("üîã –î–ê–ù–ù–´–ï –î–ê–¢–ß–ò–ö–û–í:")
    print("=" * 50)
    
    for sensor_number in [1, 2, 3]:
        sensor_data = get_sensor_data(example_data, sensor_number)
        print(f"\n–î–∞—Ç—á–∏–∫ {sensor_number}:")
        print(f"  –ë–∞—Ç–∞—Ä–µ—è: {sensor_data['battery_level']}% (0x{sensor_data['battery_raw']:02X})")
        print(f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {sensor_data['state']} (0x{sensor_data['state_raw']:02X})")
        print(f"  –ò–Ω–¥–µ–∫—Å: {sensor_data['index']}")
        print(f"  –°–∏–≥–Ω–∞–ª: {sensor_data['signal_level']} (0x{sensor_data['signal_raw']:02X})")
        print(f"  –ü–æ–∑–∏—Ü–∏–∏: {sensor_data['positions']}")
